// Code generated by MockGen. DO NOT EDIT.
// Source: url.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/dihmuzikien/smallurl/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUrlRepository is a mock of UrlRepository interface.
type MockUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryMockRecorder
}

// MockUrlRepositoryMockRecorder is the mock recorder for MockUrlRepository.
type MockUrlRepositoryMockRecorder struct {
	mock *MockUrlRepository
}

// NewMockUrlRepository creates a new mock instance.
func NewMockUrlRepository(ctrl *gomock.Controller) *MockUrlRepository {
	mock := &MockUrlRepository{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepository) EXPECT() *MockUrlRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUrlRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUrlRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUrlRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockUrlRepository) Get(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUrlRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUrlRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockUrlRepository) List(ctx context.Context) ([]domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUrlRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUrlRepository)(nil).List), ctx)
}

// Put mocks base method.
func (m *MockUrlRepository) Put(ctx context.Context, url domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockUrlRepositoryMockRecorder) Put(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUrlRepository)(nil).Put), ctx, url)
}

// MockUrlUseCase is a mock of UrlUseCase interface.
type MockUrlUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUrlUseCaseMockRecorder
}

// MockUrlUseCaseMockRecorder is the mock recorder for MockUrlUseCase.
type MockUrlUseCaseMockRecorder struct {
	mock *MockUrlUseCase
}

// NewMockUrlUseCase creates a new mock instance.
func NewMockUrlUseCase(ctrl *gomock.Controller) *MockUrlUseCase {
	mock := &MockUrlUseCase{ctrl: ctrl}
	mock.recorder = &MockUrlUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlUseCase) EXPECT() *MockUrlUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrlUseCase) Create(ctx context.Context, destination string) (domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, destination)
	ret0, _ := ret[0].(domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUrlUseCaseMockRecorder) Create(ctx, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrlUseCase)(nil).Create), ctx, destination)
}

// CreateWithId mocks base method.
func (m *MockUrlUseCase) CreateWithId(ctx context.Context, id, destination string) (domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithId", ctx, id, destination)
	ret0, _ := ret[0].(domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithId indicates an expected call of CreateWithId.
func (mr *MockUrlUseCaseMockRecorder) CreateWithId(ctx, id, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithId", reflect.TypeOf((*MockUrlUseCase)(nil).CreateWithId), ctx, id, destination)
}

// Delete mocks base method.
func (m *MockUrlUseCase) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUrlUseCaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUrlUseCase)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockUrlUseCase) GetById(ctx context.Context, id string) (domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUrlUseCaseMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUrlUseCase)(nil).GetById), ctx, id)
}

// List mocks base method.
func (m *MockUrlUseCase) List(ctx context.Context) ([]domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUrlUseCaseMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUrlUseCase)(nil).List), ctx)
}
